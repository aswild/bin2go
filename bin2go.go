package bin2go

import (
    "fmt"
    "io"
    "io/ioutil"
)

type Generator struct{
    vars    map[string]string   // map of variablename:filename
    pkg     string              // package name
}

func New(pkg string, files ...string) (*Generator, error) {
    g := Generator{pkg: pkg}
    g.vars = make(map[string]string)
    for _, f := range files {
        v, err := FilenameToVarname(f)
        if err != nil {
            return nil, err
        }
        if err := g.addFileVar(f, v); err != nil {
            return nil, err
        }
    }
    return &g, nil
}

func (g *Generator) AddFile(f string) error {
    v, err := FilenameToVarname(f)
    if err != nil {
        return err
    }
    return g.addFileVar(f, v)
}

func (g *Generator) AddFileVar(f, v string) error {
    if !CheckVarname(v) {
        return fmt.Errorf("Invalid variable name %q", v)
    }
    return g.addFileVar(f, v)
}

func (g *Generator) addFileVar(f, v string) error {
    // make sure a variable v doesn't already exist
    if _, ok := g.vars[v]; ok {
        return fmt.Errorf("Duplicate variable %q", v)
    }
    g.vars[v] = f
    return nil
}

func (g *Generator) Output(w io.Writer) error {
    if _, err := fmt.Fprintf(w, "// generated by bin2go\n\npackage %s\n", g.pkg); err != nil {
        return err
    }

    for v, f := range g.vars {
        if err := outputFileVar(w, f, v); err != nil {
            return err
        }
    }

    return nil
}

func outputFileVar(w io.Writer, f, v string) error {
    if _, err := fmt.Fprintf(w, "\nvar %s = [...]byte{", v); err != nil {
        return err
    }

    data, err := ioutil.ReadFile(f)
    if err != nil {
        return fmt.Errorf("Failed to read file: %v", err)
    }

    for i, b := range data {
        if (i % 16) == 0 {
            if _, err := io.WriteString(w, "\n    "); err != nil {
                return err
            }
        } else {
            if _, err := io.WriteString(w, " "); err != nil {
                return err
            }
        }
        if _, err := fmt.Fprintf(w, "0x%02x,", b); err != nil {
            return err
        }
    }
    if _, err := io.WriteString(w, "\n}\n"); err != nil {
        return err
    }
    return nil
}

/*
func main() {
    if len(os.Args) < 2 {
        fmt.Fprintln(os.Stderr, "Not enough args")
        os.Exit(2)
    }

    filename := os.Args[1]
    data, err := ioutil.ReadFile(filename)
    if err != nil {
        fmt.Fprintln(os.Stderr, "Failed to read", filename, err)
        os.Exit(1)
    }

    fp := os.Stdout
    defer fp.Close()

    fmt.Fprintf(fp, "var data = [...]byte{")
    for i, b := range data {
        if (i % 16) == 0 {
            fp.WriteString("\n    ")
        } else {
            fp.WriteString(" ")
        }
        fmt.Fprintf(fp, "0x%02x,", b)
    }
    fp.WriteString("\n}\n")
}
*/
